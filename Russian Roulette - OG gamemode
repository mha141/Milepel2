#!/bin/python3
# -*- coding: utf-8 -*-

# Importerer det vi trenger
from sense_hat import SenseHat
sense = SenseHat()
import time
import random
# Alle matriser (pixel-bilder) lagres i egen fil for ryddighetens skyld.
# Importerer en hjemmelagd funksjon for å kunne anvende disse matrisene/bildene. 
from animasjoner_milepel2 import *

# Funksjon for "revolver-tønne", hvor tønnen spinner når du har ladet ferdig. (For å vise at det skuddene blir tilfeldiggjort) 
def spinn():
  grader = [270, 90, 180, 0] # Grader som trengs
  for i in range(4): # Gjør det under 4 ganger
    for i in range(len(grader)): # Bruker hele listen
      sense.set_rotation(grader[i]) # Roterer
      time.sleep(0.1)

# Funksjon for animasjon av våpen avfyrt.
def avfyrt():
  skuddavfyrt = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O"] # Alle animasjoner som trengs
  for i in range(len(skuddavfyrt)): # Bruker hele listen
    sense.set_pixels(animasjoner(skuddavfyrt[i]))
    time.sleep(0.1)

# Funksjon for � velge hvor mange som er med i spillet (H�rer til extended gamemode)
def playercount():
  sense.show_message('Velg spillere. Opp -> +1, Ned -> -1, press -> exit')
  # Starter med to spillere ved antakelsen at det skal v�re en gruppe som spiller
  players = 2
  while True:
    for event in sense.stick.get_events():
      if event.action == 'pressed':
        # Om joystick opp legg til en spiller
        if event.direction == 'up':
          players += 1
        # Om joystick ned
        elif event.direction == 'down':
          # Og mengden spillere er høyere enn 2 trekk fra en spiller
          if players > 2:
            players = players - 1
          # Og ellers forblir mengden spillere lik
          else:
            players = players
        # Om jostick presses ned returner mengden spillere og stop funksjonen
        elif event.action == 'pressed':
          return int(players)
        # Vis mengden spillere
        sense.show_message(str(players))
            
def log_score(score):
  
  # Her henter vi inn de riktige standardmodulene
  import csv 
  import datetime as dt 

  # Her blir den riktige dataen hentet inn.
  # Poeng som kommer fra argumentet til funksjonen og tidspunktet til når funksjonen blir kjørt.
  poeng = str(score)
  tidspunkt = dt.datetime.now() 
    
  # Disse variablene brukes til csv.DictWriter funksjonen i variabelen log_score_once.
  fieldnames = ["Score", "Tidspunkt"]   
  dictionary = [{"Score" : f"{poeng}", "Tidspunkt" : f"{tidspunkt}"}] 
  
  counting_number = 0
  counting_number_1 = 0 
  iterator_for_dictionaries_from_CSV_1 = 0 # Iteratorer brukt i funksjonen.
  dictionary_SenseHat = dict([])
  dictionary_SenseHat_result = dict([])
  nested_dictionaries = dict([])
  listed_dictionaries = []
      
  # Her er lagringen av dataen i dictionaries brukt ulike steder i funksjonen.
  
  # Den første delen av koden åpner filen scorelist.csv. Den legger inn dataen den akkurat har samlet inn. Den passer også på om filen er tom, og hvis den er det
  # så vil den legge til en header i toppen.
  with open('scorelist.csv', 'a', newline="" ) as f:
    log_score_once = csv.DictWriter(f, fieldnames = fieldnames)
     
    with open("scorelist.csv", "r") as f_init:
        content = f_init.readline()
        if len(content) == 0:
            log_score_once.writeheader()
    
    log_score_once.writerows(dictionary)
  
  # Denne delen av koden er rettet mot visningen av det beste resultatet på rpi'en.
  # Den henter inn all data fra filen scorelist.csv og sorterer den etter resultat i poeng.
  with open("scorelist.csv", "r") as f:
    dictionaries_from_CSV = csv.DictReader(f)
    
    # Det er gjennomgående i koden at for-løkkene bruker iteratorer for å identifsere linjenummer. Linjenummeret blir brukt som nøkkel i dictionaryene.
    for dictionary_in_dictionaries_from_CSV in dictionaries_from_CSV:
        dictionary_SenseHat.update({counting_number : dictionary_in_dictionaries_from_CSV})
        counting_number += 1
    
    for iterator in range(len(dictionary_SenseHat)):
        if counting_number_1 < float(dictionary_SenseHat[iterator]["Score"]):
            counting_number_1 = float(dictionary_SenseHat[iterator]["Score"])
            dictionary_SenseHat_result = dictionary_SenseHat[iterator]
  
  # Dette er en liten, men viktig del av koden når det kommer til resultatlisten. Den sletter alt innhold i filen Topp5.csv.
  # Det blir gjort for at den nye resultatlisten ikke skal legge seg under den forrige.
  f = open("Topp5.csv", "w+")
  f.close()
  
  # Denne delen henter inn data fra scorelist.csv, deretter legger den dataen i en nye dictionary med en ny nøkkel. 
  with open("scorelist.csv", "r")  as f:
    dictionaries_from_CSV_1 = csv.DictReader(f)
    
    for dictionary_in_dictionaries_from_CSV_1 in dictionaries_from_CSV_1:
        nested_dictionaries.update({iterator_for_dictionaries_from_CSV_1 : dictionary_in_dictionaries_from_CSV_1})
        iterator_for_dictionaries_from_CSV_1 += 1
  
  # Denne for-løkken henter data fra den forrige dictionaryen. Deretter legger den det inn i en liste som skal bli sortert etter resultatet i score.
  for iterator_1 in range(len(nested_dictionaries)):
     listed_dictionaries.append([iterator_1,{ "Score":float(nested_dictionaries[iterator_1]["Score"]),"Tidspunkt":nested_dictionaries[iterator_1]["Tidspunkt"]}])
  
  # På denne måten har vi sortert all dataen fra filen scorelist.csv, og ikke kun funnet den med best resultat.  
  sorted_objects = sorted(listed_dictionaries, reverse = True, key = lambda x: x[1]["Score"])
  
  # Den siste for-løkken gjør det samme som den første, men denne legger resultatet inn i en ny fil som heter Topp5.csv
  for iterator_2 in range(len(sorted_objects)):
      dictionary_1 =  [{"Plassering" : f"{iterator_2 + 1}", "Score" : f"{sorted_objects[iterator_2][1]['Score']}", "Tidspunkt" : f"{sorted_objects[iterator_2][1]['Tidspunkt']}"}]
      fieldnames_1 = ["Plassering", "Score", "Tidspunkt"]
      with open("Topp5.csv", "a", newline= "") as f:
          Topp5_fil = csv.DictWriter(f, fieldnames = fieldnames_1)
              
          with open("Topp5.csv", "r") as f_init_1:
              content_1 = f_init_1.readline()
              if len(content_1) == 0:
                  Topp5_fil.writeheader()
              
          Topp5_fil.writerows(dictionary_1)
   
  # Her blir det beste resultatet vist på rpi'en.
  sense.show_message(f"Hoyeste Score: {dictionary_SenseHat_result['Score']}, Tidspunktet var: {dictionary_SenseHat_result['Tidspunkt']}.")



# Funksjon som bare returnerer eller blir ferdig om spilleren selv beveger RPIEn som et våpen avfyrt med en rekyl. Denne funksjonen brukes kun etter avtrekker (stick) er brukt.
def rekyl():
  while True:
    gyroscope1 = sense.get_gyroscope() # Henter verdier for gyroskop
    gyroYaw1 = '{yaw}'.format(**gyroscope1) # Henter ut kun yaw fra variabel 
    u1 = float(gyroYaw1) # Posisjon 1
    time.sleep(0.2) # Venter en kort stund
    gyroscope2 = sense.get_gyroscope() # Nye verdier 
    gyroYaw2 = '{yaw}'.format(**gyroscope2) # Ny yaw
    u2 = float(gyroYaw2) # Posisjon 2
    if u2 - u1 > 25: # Om det er en stor endring (på en kort tid pga time.sleep) = Om det er en stor akselerasjon.
      break # Hopp ut og gå videre i spillet

# Forside for spill.
def forside():
  sense.show_message('Up: +1, Down: -1') # Viser hvordan man lader våpen.
  sense.set_pixels(animasjoner("TOM")) # Animasjon for tom tønne.
  
  # Liste over animasjoner som viser antall skudd satt inn i tønnen.
  ladning = [animasjoner("TOM"), animasjoner("ETT"), animasjoner("TO"), animasjoner("TRE"), animasjoner("FIRE"), animasjoner("FEM"), animasjoner("SEKS")]
  
  # Liste over antall kuler i tønne, satt til tom for nytt spill.    
  antallkuler = []
      
  while True:
    for event in sense.stick.get_events(): # Henter inn stick bevegelser
      if event.action == 'pressed':
        if event.direction == 'up': # Om opp:
          if len(antallkuler) != 6: # Hvis IKKE fullt:
            n = 1 # En kule ->
            antallkuler.append(n) # Legg til.
            index = list.count(antallkuler, 1) # Teller kuler (som utgjør hele listen i dette tidspunkt)
            if index <= 6 and index >= 0: # Tønnen har bare plass til 6 kuler.
              sense.set_pixels(ladning[index]) # Sett passende animasjon til antall kuler
        elif event.direction == 'down': # Om ned:
          if len(antallkuler) != 0: # Hvis IKKE mindre enn tomt:
            del antallkuler[0] # Ta vekk en kule
            index = list.count(antallkuler, 1) # Tell kuler nå
            sense.set_pixels(ladning[index]) # Sett passende animasjon
        elif event.direction == 'middle' and list.count(antallkuler, 1) != 0: # Om midten OG tønnen ikke er tom:
          for i in range(6 - len(antallkuler)): # For alle gjenstående plasser, hvor totalt plasser er 6:
            n = 0 # En tom "hylse"
            antallkuler.append(0) # Legg til
          sense.show_message('Single: <- , Extended: v, Multi: ->, ') # Hvis valg av multiplayer og singleplayer
          sense.stick.wait_for_event() # Venter på svar
          for event in sense.stick.get_events(): 
            if event.action == 'pressed':
              if event.direction == 'right': # Om høyre 
                spinn() # Spinner tønne
                spillflere(antallkuler) # Kjører multiplayer spill
              elif event.direction == 'left': # Om venstre
                spinn() # Spinner tønne
                spillalene(antallkuler) # Kjører singleplayer spill
              elif event.direction == 'down':
                spinn() # Spinner tønne
                spillflereextended(antallkuler) # Kjører extended multiplayer

# Funksjon for ikke avfyrt våpen                  
def fakeBang():
  sense.set_pixels(animasjoner("FAKE_BANG"))
  time.sleep(1)

# Singleplayer      
def spillalene(antallkuler): # Funksjon må vite antall kuler i magasin, får dette fra forside()
  magasin = random.sample(antallkuler, len(antallkuler)) # Randomiserer listen av kuler.
  i = 0 # Starterå fyre av første hylse
  score = 0 # Starter med 0 i score
  while True:
    sense.set_pixels(animasjoner("A")) # animasjon for våpen
    for event in sense.stick.get_events():
      if event.action == 'pressed': # Om avtrekker er rørt
        if i == 6: # Hvis man er på det syvende skuddet som ikke er mulig.
          sense.show_message('GAME OVER') # Sikrer at man aldri når det umulige syvende skuddet
        elif magasin[i] == 1: # Tønnen i våpenet er en liste av 1 og 0. 1 representerer en kule, 0 er ikke en kule.
          rekyl() # Kjør rekyl, programmet venter på en rekyl fra bruker.
          avfyrt() # Kjør animasjon
          sense.show_message('DEAD') # Tapt / game over
          del magasin[0:6] # Tøm tønnen
          forside() # Restart
        else: # Om ikke kule
          rekyl() # Vent på bruker for tilting av RPIE
          fakeBang() # Animasjon
        i += 1 # Gjør at neste avtrekkelse sjekker neste mulige skudd i liste
      elif event.action == 'held': # Om holder inne, NB: Man holder inne for å avslutte spillet, men det blir likevel avfyrt et siste skudd. (Avslutt en runde før du hadde tenkt)
        fakeBang() # Animasjon
        score = i * 1000 + magasin.count(1) * 1000 # Score utregning, flere kuler gir mer og flere avtrekninger gir mer.
        sense.show_message('Din score: ' + str(score)) # Viser score
        log_score(score) # Logger score i egen fil
        forside() # Restart

# Multiplayer (Mye det samme som single)     
def spillflere(antallkuler):
  magasin = random.sample(antallkuler, len(antallkuler)) # Randomiserer 
  i = 0
  score = 0
  while True:
    sense.set_pixels(animasjoner("A"))
    for event in sense.stick.get_events():
      if event.action == 'pressed':
        if i == 6:
          sense.show_message('GAME OVER')
          forside()
        elif magasin[i] == 1: # Her fortsetter programmet om en kule blir avfyrt, fordi det er mulig at andre spillere "lever".
          rekyl()
          avfyrt()
          del magasin[i] # Slett kulen, den er brukt opp.
          magasin.insert(i, 0) # Tom rom står igjen når kulen er vekke.
        else:
          rekyl()
          fakeBang()
        i += 1    

# Multiplayer en extended versjon
def spillflereextended(antallkuler):
  # Definerer mengden spillere, lager "magasinet", setter en teller i og definerer score
  players = playercount()
  magasin = random.sample(antallkuler, len(antallkuler))
  i = 0
  score = 0
  while True:
    sense.set_pixels(animasjoner("A"))
    for event in sense.stick.get_events():
      # Om joysticken trykkes inn start spillet
      if event.action == 'pressed':
        # Om magasinet er gatt en runde, lag et nytt magasin og resetter indeksen i.
        if i ==  6:
          magasin = random.sample(antallkuler, len(antallkuler))
          i = 0
          print(magasin)
        # Om det kun er en spiller igjen vis "winner" og gå til forsiden
        if players == 1:
          time.sleep(1.5)
          sense.show_message('WINNER!')
          forside()
        # Eller, om joysticken holdes inne avslutt spillet og g� til forsiden
        elif event.action == 'held':
          sense.show_message('GAME OVER')
          forside()
        # Eller om magasinet har en "kule" ved indeks i "skyt"/eliminer spiller og fjerner "kulen"
        elif magasin[i] == 1:
          rekyl()
          avfyrt()
          players = players - 1
          # Om spillere som gjennstår er over 1 vis hvormange som gjenstår og fjern kulen fra magasinet
          if players > 1:
            sense.show_message(str(players) + ' players remain')
            del magasin[i]
            magasin.insert(i, 0)
            print(magasin)
        # Ellers vis fakebang
        else:
          rekyl()
          fakeBang()
          print(magasin)
        # Ook indeksen med en
        i += 1

# Kjører funksjonen som fører til alle andre funksjoner
forside()

